// Generated by CoffeeScript 1.3.3
var abc,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

abc = (function() {
  var MAX_UNIX_TIME, e1, e1_body, e2, e2_body, fp_flag, time, time2, trajectory;

  function abc() {
    this.update = __bind(this.update, this);

    this.limitCSL = __bind(this.limitCSL, this);

    this.savePosture = __bind(this.savePosture, this);

    this.detectAttractor = __bind(this.detectAttractor, this);

    this.searchSubarray = __bind(this.searchSubarray, this);
    this.postures = [];
  }

  abc.prototype.searchSubarray = function(sub, array, eps) {
    var found, i, j, _i, _j, _ref, _ref1;
    if (eps == null) {
      eps = 0.008;
    }
    found = [];
    for (i = _i = 0, _ref = array.length - sub.length; _i <= _ref; i = _i += 1) {
      for (j = _j = 0, _ref1 = sub.length - 1; _j <= _ref1; j = _j += 1) {
        if (Math.abs(sub[j][0] - array[i + j][0]) > eps || Math.abs(sub[j][1] - array[i + j][1]) > eps || Math.abs(sub[j][2] - array[i + j][2]) > eps) {
          break;
        }
      }
      if (j === sub.length) {
        found.push(i);
        i = _i = i + sub.length;
      }
    }
    if (found.length === 0) {
      return false;
    } else {
      return found;
    }
  };

  e1 = 0.02;

  e2 = 0.04;

  e1_body = 0.1;

  e2_body = 0.15;

  fp_flag = false;

  MAX_UNIX_TIME = 1924988399;

  time = time2 = MAX_UNIX_TIME;

  trajectory = [];

  abc.prototype.detectAttractor = function(body, upper_joint, lower_joint) {
    var d, dp_body, dp_hip, dp_knee, last, posture;
    dp_body = Math.abs(body.GetAngularVelocity());
    dp_hip = Math.abs(upper_joint.GetJointSpeed());
    dp_knee = Math.abs(lower_joint.GetJointSpeed());
    /*
        #find only fixpoints, find 4 seconds of slow speed
        if dp_body < e1_body and dp_hip < e1 and dp_knee < e1
          fp_flag = true
      
          if time2 is MAX_UNIX_TIME   #starting to check if we have a fixpoint
            time2 = new Date().getTime()
    
        if dp_body > e2_body or dp_hip > e2 or dp_knee > e2
          fp_flag = false
          time2 = MAX_UNIX_TIME
    
        if (new Date().getTime() - time2) > 4000 and fp_flag is true
          console.log("found fixpoint")
          fp_flag = false
          time2 = MAX_UNIX_TIME
    */

    if (trajectory.length === 3000) {
      trajectory.shift();
    }
    trajectory.push([dp_body, dp_hip, dp_knee]);
    if (trajectory.length > 200 && (new Date().getTime() - time) > 2000) {
      last = trajectory.slice(-40);
      d = this.searchSubarray(last, trajectory);
      if (d.length > 3) {
        posture = [body.GetAngle(), upper_joint.GetJointAngle(), lower_joint.GetJointAngle()];
        console.log("found pose/attractor:" + posture);
        this.savePosture(posture);
        trajectory = [];
      }
      return time = new Date().getTime();
    }
  };

  abc.prototype.savePosture = function(posture) {
    if (!this.searchSubarray([posture], this.postures, 0.1)) {
      return this.postures.push(posture);
    }
  };

  abc.prototype.limitCSL = function(joints) {
    var j, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = joints.length; _i < _len; _i++) {
      j = joints[_i];
      if (j.csl_active && j.motor_control > 20) {
        _results.push(1);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  abc.prototype.update = function(body, upper_joint, lower_joint) {
    this.detectAttractor(body, upper_joint, lower_joint);
    return this.limitCSL([upper_joint, lower_joint]);
  };

  return abc;

})();
