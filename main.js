// Generated by CoffeeScript 1.3.3
var alpha, b2AABB, b2Body, b2BodyDef, b2CircleShape, b2Color, b2DebugDraw, b2Fixture, b2FixtureDef, b2MassData, b2MouseJointDef, b2PolygonShape, b2RevoluteJointDef, b2Shape, b2Transform, b2Vec2, b2World, beta, dt, gamma, isMouseDown, map_mode, map_mode_to_gf, map_mode_to_gi, map_state_to_mode, mouseJoint, mousePVec, mouseX, mouseY, myon_precision, physics, selectedBody, set_csl_modes, set_friction, set_posture, set_preset, set_stiction, set_stiction_vel, steps_per_frame, w0, w0_abs, w1, w1_abs, w2,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

dt = 1 / 960;

steps_per_frame = 16;

b2Vec2 = Box2D.Common.Math.b2Vec2;

b2Color = Box2D.Common.b2Color;

b2AABB = Box2D.Collision.b2AABB;

b2Transform = Box2D.Common.Math.b2Transform;

b2BodyDef = Box2D.Dynamics.b2BodyDef;

b2Body = Box2D.Dynamics.b2Body;

b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

b2Fixture = Box2D.Dynamics.b2Fixture;

b2Shape = Box2D.Collision.Shapes.b2Shape;

b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

b2World = Box2D.Dynamics.b2World;

b2MassData = Box2D.Collision.Shapes.b2MassData;

b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;

b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef;

b2MouseJointDef = Box2D.Dynamics.Joints.b2MouseJointDef;

b2DebugDraw = Box2D.Dynamics.b2DebugDraw;

map_state_to_mode = false;

w0 = 0;

w1 = 0;

w2 = 0;

w0_abs = false;

w1_abs = false;

gamma = 0;

beta = 0;

alpha = 0;

mouseX = void 0;

mouseY = void 0;

mousePVec = void 0;

isMouseDown = void 0;

selectedBody = void 0;

mouseJoint = void 0;

window.requestAnimFrame = (function() {
  return window.oRequestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
    return window.setTimeout(callback, 1000 / 60);
  };
})();

physics = (function() {
  var R, c, deltaPassed, j, kb, km, s, was_static;

  function physics() {
    this.update = __bind(this.update, this);

    this.updateMode = __bind(this.updateMode, this);

    this.calcMode = __bind(this.calcMode, this);

    this.applyFriction = __bind(this.applyFriction, this);

    this.sgn = __bind(this.sgn, this);

    this.clip = __bind(this.clip, this);

    this.updateMotor = __bind(this.updateMotor, this);

    this.updateController = __bind(this.updateController, this);

    this.Bounce = __bind(this.Bounce, this);

    this.CSL = __bind(this.CSL, this);

    this.toggleBounce = __bind(this.toggleBounce, this);

    this.toggleCSL = __bind(this.toggleCSL, this);

    this.getNoisyAngle = __bind(this.getNoisyAngle, this);

    this.toggleRecorder = __bind(this.toggleRecorder, this);

    this.createSemni = __bind(this.createSemni, this);

    this.createDoublePendulum = __bind(this.createDoublePendulum, this);

    this.createPendulum = __bind(this.createPendulum, this);

    this.createCircle = __bind(this.createCircle, this);

    this.createBox = __bind(this.createBox, this);

    var bodyDef, fixDef;
    this.world = new b2World(new b2Vec2(0, 9.81), false);
    this.set_posture = false;
    fixDef = new b2FixtureDef;
    fixDef.density = 10;
    fixDef.friction = 0.43;
    fixDef.restitution = 0.01;
    this.fixDef = fixDef;
    this.ground_height = 0.03;
    this.ground_width = 3;
    bodyDef = new b2BodyDef;
    bodyDef.type = b2Body.b2_staticBody;
    bodyDef.position.x = 1;
    bodyDef.position.y = 1.1;
    bodyDef.linearDamping = 30;
    fixDef.shape = new b2PolygonShape;
    fixDef.shape.SetAsBox(this.ground_width, this.ground_height);
    this.ground = this.world.CreateBody(bodyDef);
    this.ground_bodyDef = bodyDef;
    this.ground.CreateFixture(fixDef);
    this.debugDraw = new b2DebugDraw();
    this.debugDraw.SetSprite(document.getElementById("canvas").getContext("2d"));
    this.debugDraw.SetDrawScale(280);
    this.debugDraw.SetFillAlpha(0.3);
    this.debugDraw.SetLineThickness(1.0);
    this.debugDraw.AppendFlags(b2DebugDraw.e_shapeBit);
    this.world.SetDebugDraw(this.debugDraw);
    this.run = true;
    this.step = false;
    this.pend_style = 0;
    this.recordPhase = false;
  }

  physics.prototype.createBox = function() {
    var bodyDef, box, fixDef;
    fixDef = new b2FixtureDef;
    fixDef.density = 1;
    fixDef.friction = 0.3;
    fixDef.restitution = 0.2;
    this.fixDef = fixDef;
    fixDef.shape = new b2PolygonShape;
    fixDef.shape.SetAsBox(0.1, 0.1);
    bodyDef = new b2BodyDef;
    bodyDef.type = b2Body.b2_staticBody;
    bodyDef.position.Set(1.3, 0.8);
    box = this.world.CreateBody(bodyDef);
    return box.CreateFixture(fixDef);
  };

  physics.prototype.createCircle = function() {
    var bodyDef, box, fixDef;
    fixDef = new b2FixtureDef;
    fixDef.density = 1;
    fixDef.friction = 0.3;
    fixDef.restitution = 0.2;
    this.fixDef = fixDef;
    fixDef.shape = new b2CircleShape;
    fixDef.shape.m_radius = 0.12;
    bodyDef = new b2BodyDef;
    bodyDef.type = b2Body.b2_staticBody;
    bodyDef.position.Set(1.3, 0.8);
    box = this.world.CreateBody(bodyDef);
    return box.CreateFixture(fixDef);
  };

  physics.prototype.lower_joint = null;

  physics.prototype.createPendulum = function() {
    var bodyDef, damping, jointDef, line, mass, mass_size, pend_length, pend_vertices;
    pend_length = 0.400;
    mass_size = 0.03;
    damping = 0;
    bodyDef = new b2BodyDef;
    bodyDef.type = b2Body.b2_dynamicBody;
    this.fixDef.density = 35;
    this.fixDef.shape = new b2PolygonShape;
    pend_vertices = new Array(new b2Vec2(this.ground_bodyDef.position.x, this.ground_bodyDef.position.y - this.ground_height - 0.005), new b2Vec2(this.ground_bodyDef.position.x, this.ground_bodyDef.position.y - this.ground_height - pend_length));
    this.fixDef.shape.SetAsArray(pend_vertices, 2);
    bodyDef.linearDamping = damping;
    bodyDef.angularDamping = damping;
    this.body = this.world.CreateBody(bodyDef);
    line = this.body.CreateFixture(this.fixDef);
    this.body.z2 = 0;
    this.body.motor_torque = 0;
    this.body.I_tm1 = 0;
    this.body.U_csl = 0;
    this.fixDef.shape = new b2CircleShape(mass_size);
    this.fixDef.shape.m_p = pend_vertices[1];
    mass = this.body.CreateFixture(this.fixDef);
    jointDef = new b2RevoluteJointDef();
    jointDef.Initialize(this.ground, this.body, pend_vertices[0]);
    jointDef.collideConnected = true;
    jointDef.maxMotorTorque = beta;
    jointDef.motorSpeed = 0.0;
    jointDef.enableMotor = true;
    this.lower_joint = this.world.CreateJoint(jointDef);
    this.lower_joint.angle_speed = 0;
    this.lower_joint.csl_active = false;
    this.lower_joint.bounce_active = false;
    this.lower_joint.joint_name = 'lower';
    this.lower_joint.csl_sign = 1;
    this.lower_joint.gain = 1;
    return this.lower_joint.gb = 0;
  };

  physics.prototype.upper_joint = null;

  physics.prototype.createDoublePendulum = function() {
    var bodyDef, damping, jointDef, line, line2, mass, mass_size, pend_length, pend_vertices;
    pend_length = 0.5;
    mass_size = 0.04;
    damping = 0;
    bodyDef = new b2BodyDef;
    bodyDef.type = b2Body.b2_dynamicBody;
    this.fixDef.density = 10;
    this.fixDef.shape = new b2PolygonShape;
    pend_vertices = new Array(new b2Vec2(this.ground_bodyDef.position.x, this.ground_bodyDef.position.y - this.ground_height - 0.005), new b2Vec2(this.ground_bodyDef.position.x, this.ground_bodyDef.position.y - this.ground_height - pend_length));
    this.fixDef.shape.SetAsArray(pend_vertices, 2);
    bodyDef.linearDamping = damping;
    bodyDef.angularDamping = damping;
    this.body = this.world.CreateBody(bodyDef);
    line = this.body.CreateFixture(this.fixDef);
    this.body.z2 = 0;
    this.body.motor_torque = 0;
    this.body.I_tm1 = 0;
    this.body.U_csl = 0;
    jointDef = new b2RevoluteJointDef();
    jointDef.Initialize(this.body, this.ground, pend_vertices[0]);
    jointDef.collideConnected = true;
    this.lower_joint = this.world.CreateJoint(jointDef);
    this.lower_joint.angle_speed = 0;
    this.lower_joint.csl_active = false;
    this.lower_joint.bounce_active = false;
    this.lower_joint.joint_name = 'lower';
    this.lower_joint.csl_sign = 1;
    this.lower_joint.gain = 1;
    this.lower_joint.gb = 0;
    this.fixDef.shape = new b2CircleShape(mass_size);
    this.fixDef.shape.m_p = pend_vertices[1];
    mass = this.body.CreateFixture(this.fixDef);
    pend_vertices = new Array(new b2Vec2(this.ground_bodyDef.position.x, this.ground_bodyDef.position.y - this.ground_height - pend_length - 0.005), new b2Vec2(this.ground_bodyDef.position.x, this.ground_bodyDef.position.y - this.ground_height - (2 * pend_length)));
    this.fixDef.shape = new b2PolygonShape;
    this.fixDef.shape.SetAsArray(pend_vertices, 2);
    bodyDef.linearDamping = damping;
    bodyDef.angularDamping = damping;
    this.body2 = this.world.CreateBody(bodyDef);
    line2 = this.body2.CreateFixture(this.fixDef);
    this.body2.z2 = 0;
    this.body2.motor_torque = 0;
    jointDef = new b2RevoluteJointDef();
    jointDef.Initialize(this.body2, this.body, pend_vertices[0]);
    jointDef.collideConnected = false;
    this.upper_joint = this.world.CreateJoint(jointDef);
    this.upper_joint.angle_speed = 0;
    this.upper_joint.csl_active = false;
    this.upper_joint.bounce_active = false;
    this.upper_joint.joint_name = 'upper';
    this.upper_joint.csl_sign = 1;
    this.upper_joint.gain = 1;
    this.upper_joint.gb = 0;
    this.fixDef.shape = new b2CircleShape(mass_size);
    this.fixDef.shape.m_p = pend_vertices[1];
    return mass = this.body2.CreateFixture(this.fixDef);
  };

  /*
    ellipse2polygon: (r, b, x0, y0) =>
      points = new Array()
      step = 2*Math.PI/40
      for theta in [2*Math.PI..0] by -step
        x = + b*r*Math.cos(theta)
        y = - r*Math.sin(theta)
        points.push(new b2Vec2(x,y))
      return points[0...points.length-1]
  */


  physics.prototype.upper_joint = null;

  physics.prototype.createSemni = function(x0, y0) {
    var bodyDef, bodyDef2, bodyDef3, bodyDensity, bodyFriction, bodyResitution, fixture, jointDef, lowerArmDensity, lowerArmFriction, lowerArmRestitution, md, upperArmDensity, upperArmFriction, upperArmRestitution, _i, _j, _k, _len, _len1, _len2;
    if (x0 == null) {
      x0 = 1;
    }
    if (y0 == null) {
      y0 = 0.5;
    }
    bodyDensity = 0.96;
    bodyFriction = 0.25;
    bodyResitution = 0.1;
    upperArmDensity = 4.2;
    upperArmFriction = 0.25;
    upperArmRestitution = 0.1;
    lowerArmDensity = 11.35;
    lowerArmFriction = 0.25;
    lowerArmRestitution = 0.2;
    bodyDef = new b2BodyDef;
    bodyDef.type = b2Body.b2_dynamicBody;
    bodyDef.position.Set(x0, y0);
    this.body = this.world.CreateBody(bodyDef);
    this.fixDef = new b2FixtureDef;
    this.fixDef.density = bodyDensity;
    this.fixDef.friction = bodyFriction;
    this.fixDef.restitution = bodyResitution;
    this.fixDef.filter.groupIndex = -1;
    this.fixDef.shape = new b2PolygonShape;
    for (_i = 0, _len = contour.length; _i < _len; _i++) {
      fixture = contour[_i];
      this.fixDef.shape.SetAsArray(fixture, fixture.length);
      this.body.CreateFixture(this.fixDef);
    }
    this.fixDef.density = 0.00001;
    this.fixDef.shape = new b2CircleShape;
    this.fixDef.shape.m_p.Set(head[0].x, head[0].y);
    this.fixDef.shape.m_radius = head[1];
    this.fixDef.filter.groupIndex = 1;
    this.body.CreateFixture(this.fixDef);
    md = new b2MassData();
    this.body.GetMassData(md);
    md.center.Set(contourCenter.x, contourCenter.y);
    md.I = this.body.GetInertia() + md.mass * (md.center.x * md.center.x + md.center.y * md.center.y);
    this.body.SetMassData(md);
    bodyDef2 = new b2BodyDef;
    bodyDef2.type = b2Body.b2_dynamicBody;
    this.body2 = this.world.CreateBody(bodyDef2);
    this.fixDef2 = new b2FixtureDef;
    this.fixDef2.density = upperArmDensity;
    this.fixDef2.friction = upperArmFriction;
    this.fixDef2.restitution = upperArmRestitution;
    this.fixDef2.filter.groupIndex = -1;
    this.fixDef2.shape = new b2PolygonShape;
    for (_j = 0, _len1 = arm1ContourConvex.length; _j < _len1; _j++) {
      fixture = arm1ContourConvex[_j];
      this.fixDef2.shape.SetAsArray(fixture, fixture.length);
      this.body2.CreateFixture(this.fixDef2);
    }
    md = new b2MassData();
    this.body2.GetMassData(md);
    md.center.Set(arm1Center.x, arm1Center.y);
    md.I = this.body2.GetInertia() + md.mass * (md.center.x * md.center.x + md.center.y * md.center.y);
    this.body2.SetMassData(md);
    this.body2.SetPositionAndAngle(new b2Vec2(arm1Center.x, arm1Center.y), 0);
    this.body2.z2 = 0;
    this.body2.last_motor_torque = 0;
    this.body2.motor_torque = 0;
    this.body2.I_tm1 = 0;
    this.body2.U_csl = 0;
    this.body2.bounce_sign = 1;
    jointDef = new b2RevoluteJointDef();
    jointDef.bodyA = this.body;
    jointDef.bodyB = this.body2;
    jointDef.localAnchorA.Set(arm1JointAnchor.x, arm1JointAnchor.y);
    jointDef.localAnchorB.Set(arm1JointAnchor.x, arm1JointAnchor.y);
    jointDef.collideConnected = true;
    jointDef.maxMotorTorque = beta;
    jointDef.motorSpeed = 0.0;
    jointDef.enableMotor = true;
    this.upper_joint = this.world.CreateJoint(jointDef);
    this.upper_joint.angle_speed = 0;
    this.upper_joint.csl_active = false;
    this.upper_joint.bounce_active = false;
    this.upper_joint.bounce_vel = 0.0003;
    this.upper_joint.joint_name = 'upper';
    this.upper_joint.csl_sign = 1;
    bodyDef3 = new b2BodyDef;
    bodyDef3.type = b2Body.b2_dynamicBody;
    this.body3 = this.world.CreateBody(bodyDef3);
    this.fixDef3 = new b2FixtureDef;
    this.fixDef3.density = lowerArmDensity;
    this.fixDef3.friction = lowerArmFriction;
    this.fixDef3.restitution = lowerArmRestitution;
    this.fixDef3.filter.groupIndex = -1;
    this.fixDef3.shape = new b2PolygonShape;
    for (_k = 0, _len2 = arm2ContourConvex.length; _k < _len2; _k++) {
      fixture = arm2ContourConvex[_k];
      this.fixDef3.shape.SetAsArray(fixture, fixture.length);
      this.body3.CreateFixture(this.fixDef3);
    }
    md = new b2MassData();
    this.body3.GetMassData(md);
    md.center.Set(arm2Center.x, arm2Center.y);
    md.I = this.body3.GetInertia() + md.mass * (md.center.x * md.center.x + md.center.y * md.center.y);
    this.body3.SetMassData(md);
    this.body3.SetPositionAndAngle(new b2Vec2(arm1Center.x, arm1Center.y), 0);
    this.body3.z2 = 0;
    this.body3.last_motor_torque = 0;
    this.body3.motor_torque = 0;
    this.body3.I_tm1 = 0;
    this.body3.U_csl = 0;
    this.body3.bounce_sign = 1;
    jointDef = new b2RevoluteJointDef();
    jointDef.bodyA = this.body2;
    jointDef.bodyB = this.body3;
    jointDef.localAnchorA.Set(arm2JointAnchor.x, arm2JointAnchor.y);
    jointDef.localAnchorB.Set(arm2JointAnchor.x, arm2JointAnchor.y);
    jointDef.collideConnected = false;
    jointDef.maxMotorTorque = beta;
    jointDef.motorSpeed = 0.0;
    jointDef.enableMotor = true;
    jointDef.upperAngle = 1.90816;
    jointDef.lowerAngle = -3.2421;
    jointDef.enableLimit = true;
    this.lower_joint = this.world.CreateJoint(jointDef);
    this.lower_joint.angle_speed = 0;
    this.lower_joint.csl_active = false;
    this.lower_joint.bounce_active = false;
    this.lower_joint.bounce_vel = 0.0004;
    this.lower_joint.joint_name = 'lower';
    return this.lower_joint.csl_sign = 1;
  };

  physics.prototype.toggleRecorder = function() {
    return this.recordPhase = !this.recordPhase;
  };

  physics.prototype.getNoisyAngle = function(bodyJoint) {
    var rand;
    rand = 0;
    return -bodyJoint.GetJointAngle() * (1 + rand);
  };

  physics.prototype.toggleCSL = function(bodyObject, bodyJoint) {
    if (bodyJoint.bounce_active) {
      $("#toggle_bounce").click();
    }
    bodyJoint.csl_active = !bodyJoint.csl_active;
    if (this.lower_joint) {
      $("#set_csl_params_lower").trigger('click');
    }
    if (this.upper_joint) {
      $("#set_csl_params_upper").trigger('click');
    }
    if (bodyJoint.last_angle == null) {
      bodyJoint.last_angle = bodyJoint.GetJointAngle();
    }
    bodyObject.U_csl = 0;
    return bodyObject.last_integrated = 0;
  };

  physics.prototype.toggleBounce = function(bodyObject, bodyJoint) {
    if (bodyJoint.csl_active) {
      $("#toggle_csl").click();
    }
    bodyJoint.bounce_active = !bodyJoint.bounce_active;
    bodyObject.U_csl = 0;
    return bodyObject.last_integrated = 0;
  };

  physics.prototype.CSL = function(gi, gf, gb, angle_diff, gain, bodyObject) {
    var sum, vel;
    if (gain == null) {
      gain = 1;
    }
    if (bodyObject.last_integrated == null) {
      bodyObject.last_integrated = 0;
    }
    vel = gi * angle_diff;
    sum = vel + bodyObject.last_integrated;
    bodyObject.last_integrated = gf * sum;
    return (sum * gain) + gb;
  };

  physics.prototype.Bounce = function(vs, angle_diff, bodyObject) {
    if (Math.abs(bodyObject.motor_torque) > 0.8) {
      bodyObject.bounce_sign = bodyObject.bounce_sign * -1;
      bodyObject.last_integrated = 0;
    }
    bodyObject.last_integrated += 30 * (angle_diff - (vs * bodyObject.bounce_sign));
    return bodyObject.last_integrated;
  };

  physics.prototype.updateController = function(bodyObject, bodyJoint) {
    bodyJoint.angle_diff_csl = bodyJoint.GetJointAngle() - bodyJoint.last_angle;
    bodyJoint.last_angle = bodyJoint.GetJointAngle();
    if (bodyJoint.csl_active) {
      return bodyObject.U_csl = this.CSL(bodyJoint.gi, bodyJoint.gf, bodyJoint.gb, bodyJoint.angle_diff_csl, bodyJoint.gain, bodyObject);
    } else if (bodyJoint.bounce_active) {
      return bodyObject.U_csl = this.Bounce(bodyJoint.bounce_vel, bodyJoint.angle_diff_csl, bodyObject);
    }
  };

  km = 1.393;

  kb = 2.563;

  R = 9.5948;

  physics.prototype.updateMotor = function(bodyObject, bodyJoint) {
    var I_t, U_csl, U_effective;
    U_csl = bodyObject.U_csl;
    U_effective = this.clip(U_csl - (kb * (-bodyJoint.GetJointSpeed())), 12);
    I_t = U_effective * (1 / R);
    bodyObject.motor_torque = km * I_t;
    return bodyJoint.m_applyTorque += bodyObject.motor_torque;
  };

  physics.prototype.clip = function(value, cap) {
    if (cap == null) {
      cap = 1;
    }
    return Math.max(-cap, Math.min(cap, value));
  };

  physics.prototype.sgn = function(value) {
    if (value > 0) {
      return 1;
    } else if (value < 0) {
      return -1;
    } else {
      return 0;
    }
  };

  physics.prototype.applyFriction = function(bodyObject, bodyJoint) {
    var fd, fg, v;
    v = -bodyJoint.GetJointSpeed();
    fg = -v * beta;
    fd = 0;
    return bodyJoint.m_applyTorque += fg + fd;
  };

  physics.prototype.calcMode = function(motor_torque, angle_speed) {
    var as, mc, mode;
    mc = w0_abs ? Math.abs(motor_torque) : motor_torque;
    as = w1_abs ? Math.abs(angle_speed) : angle_speed;
    return mode = w0 * mc + w1 * as + w2;
  };

  physics.prototype.updateMode = function(bodyObject, bodyJoint) {
    var mode;
    mode = this.calcMode(bodyObject.motor_torque, bodyJoint.angle_diff_csl);
    mode = this.clip(mode, 3);
    return map_mode(bodyJoint, mode);
  };

  was_static = false;

  deltaPassed = Treal[0][14];

  j = 0;

  s = null;

  c = new b2Color(0.3, 0.3, 0.5);

  physics.prototype.update = function() {
    var body, i, md;
    window.stats.begin();
    if ((this.run || this.step) && this.pend_style) {
      this.step = false;
      if (isMouseDown && (!mouseJoint)) {
        body = this.getBodyAtMouse();
        if (body) {
          md = new b2MouseJointDef();
          md.bodyA = this.world.GetGroundBody();
          if (body.GetType() === b2Body.b2_staticBody) {
            body.SetType(b2Body.b2_dynamicBody);
            was_static = true;
          }
          md.bodyB = body;
          md.target.Set(mouseX, mouseY);
          md.collideConnected = false;
          md.maxForce = 100.0 * body.GetMass();
          mouseJoint = this.world.CreateJoint(md);
          body.SetAwake(true);
        }
      }
      if (mouseJoint) {
        if (isMouseDown) {
          mouseJoint.SetTarget(new b2Vec2(mouseX, mouseY));
        } else {
          if (was_static) {
            mouseJoint.m_bodyB.SetType(b2Body.b2_staticBody);
            was_static = false;
            mouseJoint.m_bodyB.SetAwake(false);
          }
          this.world.DestroyJoint(mouseJoint);
          mouseJoint = null;
        }
      }
      if (this.pend_style === 1) {
        if (map_state_to_mode) {
          this.updateMode(this.body, this.lower_joint);
        }
      } else if (this.pend_style === 2) {
        if (map_state_to_mode) {
          this.updateMode(this.body, this.lower_joint);
          this.updateMode(this.body2, this.upper_joint);
        }
      }
      if (this.recordPhase) {
        console.log(-this.body.GetAngle() + " " + -this.upper_joint.GetJointAngle() + " " + -this.lower_joint.GetJointAngle());
      }
      i = 0;
      while (i < steps_per_frame) {
        if (this.pend_style === 3) {
          this.updateController(this.body2, this.lower_joint);
          this.updateController(this.body3, this.upper_joint);
          this.updateMotor(this.body2, this.lower_joint);
          this.updateMotor(this.body3, this.upper_joint);
        } else if (this.pend_style === 1) {
          this.updateController(this.body, this.lower_joint);
          this.updateMotor(this.body, this.lower_joint);
          this.applyFriction(this.body, this.lower_joint);
        } else if (this.pend_style === 2) {
          this.updateController(this.body, this.lower_joint);
          this.updateController(this.body2, this.upper_joint);
          this.updateMotor(this.body, this.lower_joint);
          this.updateMotor(this.body2, this.upper_joint);
          this.applyFriction(this.body, this.lower_joint);
          this.applyFriction(this.body2, this.upper_joint);
        }
        this.world.Step(dt, 10, 10);
        i++;
      }
      this.world.ClearForces();
      this.world.DrawDebugData();
      /*
            #trace player
            if not p?
              px = 0.7
              py = 0.7
            if j < Treal.length
              deltaPassed -= (1/60)*1000
              if deltaPassed <= 0
                j++
                deltaPassed = 100
      
              #set shadow semni to positions of next trace frame        
              f = @body.GetFixtureList()
              while f
                bodyA = Math.PI+Math.atan2(Treal[j][7], Treal[j][6])
                s = f.GetShape()
                if s.m_type == b2Shape.e_polygonShape
                  s.m_centroid.x = 0
                  s.m_centroid.y = 0
                xf = new b2Transform()
                xf.position = new b2Vec2(px,py)
                xf.R.Set(bodyA)
                @world.DrawShape(s, xf, c)
                f = f.m_next
              f = @body2.GetFixtureList()
              while f
                s = f.GetShape()
                xf = new b2Transform()
                xf.position = new b2Vec2(px,py)
                xf.R.Set(bodyA + 2*Math.PI*Treal[j][10])
                @world.DrawShape(s, xf, c)
                f = f.m_next
              f = @body3.GetFixtureList()
              while f
                s = f.GetShape()
                xf = new b2Transform()
                xf.position = new b2Vec2(px,py)
                xf.R.Set(bodyA + 2*Math.PI*Treal[j][11])
                @world.DrawShape(s, xf, c)
                f = f.m_next
      */

      draw_phase_space();
      draw_motor_torque();
    }
    requestAnimFrame(this.update);
    return window.stats.end();
  };

  return physics;

})();

set_preset = function(w0, w1, w2, w0_abs, w1_abs) {
  $("#w0").val(w0).trigger("change");
  $("#w1").val(w1).trigger("change");
  $("#w2").val(w2).trigger("change");
  if (w0_abs === true) {
    $("#w0_abs").attr("checked", "checked").trigger("change");
  } else {
    $("#w0_abs").attr("checked", null).trigger("change");
  }
  if (w1_abs === true) {
    $("#w1_abs").attr("checked", "checked").trigger("change");
  } else {
    $("#w1_abs").attr("checked", null).trigger("change");
  }
  return draw_state_to_mode_mapping();
};

map_mode_to_gi = function(mode) {
  if (mode < 0) {
    return mode * 3;
  } else {
    return 18 + (5 * mode);
  }
};

map_mode_to_gf = function(mode) {
  if (mode > 1) {
    return mode * 0.0006 + 1;
  } else if (mode < 0) {
    return 0;
  } else {
    return mode;
  }
};

map_mode = function(bodyJoint, mode, joint) {
  var gf, gi;
  if (joint == null) {
    joint = bodyJoint.joint_name;
  }
  if (!(mode != null)) {
    mode = parseFloat($("#mode_param_" + joint).val());
  }
  gi = map_mode_to_gi(mode);
  gf = map_mode_to_gf(mode);
  $("#gi_param_" + joint).val(gi);
  $("#gf_param_" + joint).val(gf);
  $("#mode_param_" + joint).val(mode);
  $("#mode_val_" + joint).html(mode.toFixed(2));
  if (gi < 0 && gf === 0) {
    $("#csl_mode_name_" + joint).html("support");
  } else if (gi > 0 && (0 <= gf && gf < 1)) {
    $("#csl_mode_name_" + joint).html("release");
  } else if (gi > 0 && gf === 1) {
    $("#csl_mode_name_" + joint).html("hold");
  } else if (gi > 0 && gf > 1) {
    $("#csl_mode_name_" + joint).html("contraction");
  } else {
    $("#csl_mode_name_" + joint).html("?");
  }
  if (bodyJoint) {
    bodyJoint.gi = gi;
    return bodyJoint.gf = gf;
  }
};

set_friction = function(newBeta) {
  beta = newBeta;
  $("#friction_val").html(beta.toFixed(3));
  if (physics.pend_style === 3) {
    physics.upper_joint.m_maxMotorTorque = beta;
    return physics.lower_joint.m_maxMotorTorque = beta;
  } else {
    return physics.lower_joint.m_maxMotorTorque = beta;
  }
};

set_stiction = function(newAlpha) {
  alpha = newAlpha;
  return $("#stiction_val").html(alpha.toFixed(3));
};

set_stiction_vel = function(newGamma) {
  gamma = newGamma;
  return $("#stiction_epsilon_val").html(gamma.toFixed(3));
};

myon_precision = function(number) {
  return Math.floor(number * 10000) / 10000;
};

set_posture = function(bodyAngle, hipAngle, kneeAngle, hipCsl, kneeCsl) {
  var p, x0, y0;
  p = physics;
  p.world.DestroyBody(p.body3);
  p.world.DestroyJoint(p.lower_joint);
  p.world.DestroyBody(p.body2);
  p.world.DestroyJoint(p.upper_joint);
  p.world.DestroyBody(p.body);
  x0 = 0.516;
  y0 = 0.76;
  return p.createSemni(x0, y0);
};

set_csl_modes = function(hipCSL, kneeCSL) {
  var contract_gf_hip, contract_gf_knee, gb, gf, release_bias_hip, release_bias_knee, release_gf;
  release_bias_hip = 1;
  release_bias_knee = 0.9;
  release_gf = 0.99;
  contract_gf_hip = 1.003;
  contract_gf_knee = 1.0025;
  if (hipCSL === "r+") {
    gf = release_gf;
    gb = release_bias_hip;
  } else if (hipCSL === "r-") {
    gf = release_gf;
    gb = -release_bias_hip;
  } else if (hipCSL === "c") {
    gf = contract_gf_hip;
    gb = 0;
  }
  $("#gf_param_upper").val(gf);
  physics.upper_joint.gf = gf;
  $("#gb_param_upper").val(gb);
  physics.upper_joint.gb = gb;
  if (kneeCSL === "r+") {
    gf = release_gf;
    gb = release_bias_knee;
  } else if (kneeCSL === "r-") {
    gf = release_gf;
    gb = -release_bias_knee;
  } else if (kneeCSL === "c") {
    gf = contract_gf_knee;
    gb = 0;
  }
  $("#gf_param_lower").val(gf);
  physics.lower_joint.gf = gf;
  $("#gb_param_lower").val(gb);
  return physics.lower_joint.gb = gb;
};

$(function() {
  var canvasPosition, getBodyCB, getElementPosition, handleMouseMove,
    _this = this;
  alpha = $("#stiction_param").val();
  beta = $("#friction_param").val();
  gamma = $("#stiction_epsilon").val();
  $("#map_state_to_mode").click(function() {
    map_state_to_mode = !map_state_to_mode;
    return $('#map_state_to_mode').attr('checked', map_state_to_mode);
  });
  $("#w0").change(function() {
    $("#w0_val").html("=" + $("#w0").val());
    return w0 = parseFloat($("#w0").val());
  });
  $("#w1").change(function() {
    $("#w1_val").html("=" + $("#w1").val());
    return w1 = parseFloat($("#w1").val());
  });
  $("#w2").change(function() {
    $("#w2_val").html("=" + $("#w2").val());
    return w2 = parseFloat($("#w2").val());
  });
  w0 = parseFloat($("#w0").val());
  w1 = parseFloat($("#w1").val());
  w2 = parseFloat($("#w2").val());
  $("#w0_abs").change(function() {
    w0_abs = $("#w0_abs").attr("checked") !== void 0;
    return draw_state_to_mode_mapping();
  });
  $("#w1_abs").change(function() {
    w1_abs = $("#w1_abs").attr("checked") !== void 0;
    return draw_state_to_mode_mapping();
  });
  w0_abs = $("#w0_abs").attr("checked") !== void 0;
  w1_abs = $("#w1_abs").attr("checked") !== void 0;
  physics = new physics();
  window.physics = physics;
  requestAnimFrame(physics.update);
  window.stats = new Stats();
  window.stats.setMode(0);
  window.stats.domElement.style.position = "absolute";
  window.stats.domElement.style.left = "0px";
  window.stats.domElement.style.top = "0px";
  document.body.appendChild(window.stats.domElement);
  getElementPosition = function(element) {
    var elem, tagname, x, y;
    elem = element;
    tagname = "";
    x = 0;
    y = 0;
    while ((typeof elem === "object") && (typeof elem.tagName !== "undefined")) {
      y += elem.offsetTop;
      x += elem.offsetLeft;
      tagname = elem.tagName.toUpperCase();
      if (tagname === "BODY") {
        elem = 0;
      }
      if (typeof elem === "object" ? typeof elem.offsetParent === "object" : void 0) {
        elem = elem.offsetParent;
      }
    }
    return {
      x: x,
      y: y
    };
  };
  canvasPosition = getElementPosition(document.getElementById("canvas"));
  document.addEventListener("mousedown", (function(e) {
    isMouseDown = true;
    handleMouseMove(e);
    return document.addEventListener("mousemove", handleMouseMove, true);
  }), true);
  document.addEventListener("mouseup", (function() {
    document.removeEventListener("mousemove", handleMouseMove, true);
    isMouseDown = false;
    mouseX = undefined;
    return mouseY = undefined;
  }), true);
  handleMouseMove = function(e) {
    mouseX = (e.clientX - canvasPosition.x) / physics.debugDraw.GetDrawScale();
    return mouseY = (e.clientY - canvasPosition.y) / physics.debugDraw.GetDrawScale();
  };
  physics.getBodyAtMouse = function() {
    var aabb;
    mousePVec = new b2Vec2(mouseX, mouseY);
    aabb = new b2AABB();
    aabb.lowerBound.Set(mouseX - 0.001, mouseY - 0.001);
    aabb.upperBound.Set(mouseX + 0.001, mouseY + 0.001);
    selectedBody = null;
    physics.world.QueryAABB(getBodyCB, aabb);
    return selectedBody;
  };
  return getBodyCB = function(fixture) {
    if (fixture.GetShape().TestPoint(fixture.GetBody().GetTransform(), mousePVec)) {
      selectedBody = fixture.GetBody();
      return false;
    }
    return true;
  };
});
