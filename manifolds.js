// Generated by CoffeeScript 1.3.3
var animate, camera, controls, createGeometry, createSquare, current_state, init, initCurrentState, renderer, scale, scene, updateCurrentState, y_offset;

scale = 3;

y_offset = 7;

createGeometry = function(geom, data) {
  var c, i, index, _i, _len, _ref;
  index = 0;
  _ref = data.data;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    i = _ref[_i];
    geom.vertices.push(new THREE.Vector3(i[8] * scale, i[6] * scale - y_offset, i[7] * scale));
    c = new THREE.Color(0xff0000);
    switch (i[1]) {
      case 1:
        c.setRGB(255 / 255, 150 / 255, 0);
        break;
      case 2:
        c.setRGB(0, 195 / 255, 80 / 255);
        break;
      case 3:
        c.setRGB(0, 173 / 255, 244 / 255);
        break;
      case 4:
        c.setRGB(197 / 255, 0, 169 / 255);
    }
    geom.colors.push(c);
  }
};

createSquare = function(geom, index, center, width) {
  var face, i, square, v1, v2, v3;
  square = [[-1, 1], [1, 1], [1, -1], [-1, -1]];
  square.push(square[0]);
  i = 0;
  while (i < 4) {
    v1 = new THREE.Vector3(0 + center.x, 0 + center.z, 0 + center.y);
    v2 = new THREE.Vector3(square[i][0] * width / 2 + center.x, 0 + center.z, square[i][1] * width / 2 + center.y);
    v3 = new THREE.Vector3(square[i + 1][0] * width / 2 + center.x, 0 + center.z, square[i + 1][1] * width / 2 + center.y);
    geom.vertices.push(v1);
    geom.vertices.push(v2);
    geom.vertices.push(v3);
    face = new THREE.Face3((i * 3) + (index * 12), (i * 3 + 1) + (index * 12), (i * 3 + 2) + (index * 12));
    face.normal = (function() {
      var va, vx, vy, vz;
      vx = (v1.y - v3.y) * (v2.z - v3.z) - (v1.z - v3.z) * (v2.y - v3.y);
      vy = (v1.z - v3.z) * (v2.x - v3.x) - (v1.x - v3.x) * (v2.z - v3.z);
      vz = (v1.x - v3.x) * (v2.y - v3.y) - (v1.y - v3.y) * (v2.x - v3.x);
      va = Math.sqrt(Math.pow(vx, 2) + Math.pow(vy, 2) + Math.pow(vz, 2));
      return new THREE.Vector3(vx / va, vy / va, vz / va);
    })();
    geom.faces.push(face);
    i++;
  }
};

scene = camera = controls = renderer = void 0;

animate = function() {
  requestAnimationFrame(animate);
  controls.update();
  if (physics.body != null) {
    updateCurrentState({
      x: -physics.lower_joint.GetJointAngle() * scale,
      z: -physics.upper_joint.GetJointAngle() * scale,
      y: -physics.body.GetAngle() * scale - y_offset
    });
  }
  return renderer.render(scene, camera);
};

init = function() {
  var canvas, geom, height, line_material, mesh_material, particle_material, ps, width;
  canvas = $("#webglCanvas");
  width = canvas[0].width;
  height = canvas[0].height;
  scene = new THREE.Scene();
  camera = new THREE.PerspectiveCamera(30, width / height, 0.1, 1000);
  camera.position.set(-35, 10, 0);
  camera.lookAt(new THREE.Vector3(50, 0, 50));
  scene.add(camera);
  renderer = new THREE.WebGLRenderer({
    canvas: canvas[0]
  });
  renderer.setClearColor(0xffffff, 1);
  geom = new THREE.Geometry();
  createGeometry(geom, {
    squareWidth: 0.2,
    data: semni_manifold
  });
  line_material = new THREE.LineBasicMaterial({
    color: 0x00FF00
  });
  mesh_material = new THREE.MeshBasicMaterial({
    color: 0xFF0000,
    wireframe: true
  });
  particle_material = new THREE.ParticleSystemMaterial({
    size: 0.05,
    fog: true,
    vertexColors: THREE.VertexColors
  });
  ps = new THREE.ParticleSystem(geom, particle_material);
  scene.add(ps);
  return controls = new THREE.OrbitControls(camera, renderer.domElement);
};

current_state = void 0;

initCurrentState = function() {
  var radius, rings, segments, sphereMaterial;
  radius = 0.2;
  segments = 4;
  rings = 4;
  sphereMaterial = new THREE.MeshLambertMaterial({
    color: 0xffffff
  });
  current_state = new THREE.Mesh(new THREE.SphereGeometry(radius, segments, rings), sphereMaterial);
  return scene.add(current_state);
};

updateCurrentState = function(state) {
  current_state.position.x = state.x;
  current_state.position.y = state.y;
  return current_state.position.z = state.z;
};

$(document).ready(function() {
  init();
  initCurrentState();
  return animate();
});
